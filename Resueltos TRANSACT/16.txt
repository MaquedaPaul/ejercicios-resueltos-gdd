/*
16. Desarrolle el/los elementos de base de datos necesarios para que ante una venta
automaticamante se descuenten del stock los articulos vendidos. Se descontaran
del deposito que mas producto poseea y se supone que el stock se almacena
tanto de productos simples como compuestos (si se acaba el stock de los
compuestos no se arman combos)
En caso que no alcance el stock de un deposito se descontara del siguiente y asi
hasta agotar los depositos posibles. En ultima instancia se dejara stock negativo
en el ultimo deposito que se desconto.
*/
SELECT * FROM STOCK

SELECT * FROM PRODUCTO

CREATE TRIGGER ej16
ON Factura
AFTER INSERT
AS
BEGIN 
	DECLARE @item_cantidad DECIMAL(12,2), @item_producto CHAR(8)
	DECLARE @comp_cantidad DECIMAL(12,2), @componente CHAR(8)
	DECLARE c1 CURSOR FOR SELECT item_cantidad, item_producto FROM inserted
	JOIN Item_Factura ON fact_tipo+fact_sucursal+fact_numero=
	item_tipo+item_sucursal+item_numero
	OPEN c1
		FETCH NEXT FROM c1 INTO @item_cantidad, @item_producto
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @item_producto IN (SELECT comp_producto FROM Composicion)
			BEGIN
				DECLARE c2 CURSOR FOR SELECT comp_componente, comp_cantidad FROM Composicion
				WHERE comp_producto = @item_producto
				OPEN c2
					FETCH NEXT FROM c2 INTO @componente,@comp_cantidad
					WHILE @@FETCH_STATUS = 0
					BEGIN
						UPDATE STOCK
						SET stoc_cantidad= stoc_cantidad - @item_cantidad*@comp_cantidad
						WHERE @componente = stoc_producto AND 
						stoc_deposito = 
						(SELECT stoc_deposito FROM STOCK
						WHERE stoc_producto = @componente
						 ORDER BY stoc_cantidad DESC)
					END
				CLOSE c2
				DEALLOCATE c2
			END
			ELSE
			BEGIN
				UPDATE STOCK
				SET stoc_cantidad= stoc_cantidad - @item_cantidad
				WHERE @item_producto = stoc_producto AND 
				stoc_deposito = 
				(SELECT stoc_deposito FROM STOCK
				 WHERE stoc_producto = @item_producto
				 ORDER BY stoc_cantidad DESC)
			END
		END
	CLOSE c1
	DEALLOCATE c1

END



--SOLUCIÃ“N PROFE


CREATE TRIGGER ej16
ON Item_factura
AFTER INSERT
AS
BEGIN 
	DECLARE @item_producto CHAR(8)
	DECLARE @item_cantidad DECIMAL(12,2)
	DECLARE @stoc_cantidad DECIMAL(12,2)
	DECLARE @stoc_deposito CHAR(2)
	DECLARE cursor_item CURSOR FOR (SELECT item_producto, item_cantidad FROM inserted)
	OPEN cursor_item
		FETCH NEXT FROM cursor_item INTO @item_producto, @item_cantidad
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF(SELECT MAX(@stoc_cantidad) FROM STOCK WHERE stoc_producto = @item_producto) = 0
			BEGIN
				UPDATE STOCK SET stoc_cantidad -= @item_cantidad WHERE stoc_deposito = @stoc_deposito
				BREAK
			END
			SELECT TOP 1 @stoc_deposito = stoc_deposito, @stoc_cantidad = stoc_cantidad
			FROM STOCK WHERE stoc_producto = @item_producto
			ORDER BY stoc_cantidad DESC

			IF @item_cantidad <= @stoc_cantidad
				UPDATE STOCK SET stoc_cantidad -= @item_cantidad 
				WHERE stoc_deposito = @stoc_deposito
			ELSE
			BEGIN
				UPDATE STOCK SET stoc_cantidad = 0 WHERE stoc_deposito = @stoc_deposito
				SELECT @item_cantidad -= @stoc_cantidad
			END
			FETCH NEXT FROM cursor_item INTO @item_producto, @item_cantidad
		END
	CLOSE cursor_item
	DEALLOCATE cursor_item
END